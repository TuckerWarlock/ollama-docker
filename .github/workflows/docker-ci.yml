name: Docker Compose CI

on:
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'docker-compose*.yml'
      - 'scripts/**'
      - 'Makefile'
      - '.env'

  push:
    branches: [ add-ci-workflow ] # for testing purposes

jobs:
  validate-documentation:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Check documentation exists
        run: |
          test -f README.md
          test -f docs/INSTALLATION.md
          test -f docs/USAGE.md
          test -f docs/AMD-GPU-SUPPORT.md
          
      - name: Validate Makefile
        run: |
          make help
          
      - name: Check required scripts
        run: |
          test -f scripts/setup.sh
          test -f scripts/model-manager.sh  
          test -f scripts/cleanup.sh
          test -f scripts/setup-amd.sh

  check-commands:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Test Makefile syntax
        run: |
          make -n help
          make -n setup || true
          make -n clean || true
          
      - name: Check script permissions
        run: |
          chmod +x scripts/*.sh
          ls -la scripts/
          
      - name: Test script syntax
        run: |
          bash -n scripts/setup.sh
          bash -n scripts/model-manager.sh
          bash -n scripts/cleanup.sh
          bash -n scripts/setup-amd.sh

  validate-compose-files:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Validate original docker-compose files
        run: |
          echo "Validating docker-compose.yml"
          docker compose -f docker-compose.yml config --quiet
          
          echo "Validating docker-compose-amd.yml"
          docker compose -f docker-compose-amd.yml config --quiet
          
          echo "All compose files are syntactically valid"

  test-docker-compose:
    needs: [validate-documentation, check-commands, validate-compose-files]
    runs-on: ubuntu-latest
    timeout-minutes: 25
    
    strategy:
      fail-fast: false
      matrix:
        config:
          - name: "NVIDIA/CPU Config"
            compose_file: "docker-compose.yml"
          - name: "AMD Config" 
            compose_file: "docker-compose-amd.yml"
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Create CI-compatible docker-compose override
        run: |
          echo "Creating CI override for ${{ matrix.config.name }}"
          
          # Create a CI override file that removes problematic configurations
          cat > docker-compose.ci.yml << 'EOF'
          services:
            ollama:
              # Remove GPU-specific configurations for CI
              runtime: null
              environment:
                - OLLAMA_HOST=0.0.0.0:11434
              # Remove any GPU environment variables and devices
              devices: []
              
            ollama-webui:
              # Remove audio/device mounts that don't exist in CI
              devices: []
              volumes:
                - ollama_webui_data:/app/backend/data
                # Remove problematic volume mounts for CI
              environment:
                - OLLAMA_BASE_URL=http://ollama:11434
                - WEBUI_AUTH=false
                # Remove audio-related environment variables
              group_add: []
              security_opt: []
              
            kokoro-tts:
              # Keep TTS service as-is since it's CPU-only
              restart: unless-stopped
          
          volumes:
            ollama_data:
              driver: local
            ollama_webui_data:
              driver: local
          EOF

      - name: Create test environment
        run: |
          echo "OLLAMA_MODEL=llama3.2:1b" > .env
          echo "OLLAMA_HOST=http://ollama:11434" >> .env

      - name: Validate CI configuration
        run: |
          echo "=== Original compose file ==="
          docker compose -f ${{ matrix.config.compose_file }} config --quiet
          
          echo "=== CI-compatible configuration ==="
          docker compose -f ${{ matrix.config.compose_file }} -f docker-compose.ci.yml config --quiet
          
          echo "=== Final configuration preview ==="
          docker compose -f ${{ matrix.config.compose_file }} -f docker-compose.ci.yml config

      - name: Start services
        run: |
          echo "Starting services with CI configuration..."
          docker compose -f ${{ matrix.config.compose_file }} -f docker-compose.ci.yml up -d
          
          echo "Waiting for services to initialize..."
          sleep 15

      - name: Wait for services to be ready
        run: |
          echo "Checking container status..."
          docker compose -f ${{ matrix.config.compose_file }} -f docker-compose.ci.yml ps
          
          # Wait for Ollama API to be ready
          echo "Waiting for Ollama API..."
          timeout 120 bash -c 'until curl -s http://localhost:11434/api/tags; do echo "Waiting for Ollama..."; sleep 5; done'
          echo "✓ Ollama API is responding"
          
          # Wait for Web UI
          echo "Waiting for Web UI..."
          timeout 120 bash -c 'until curl -s -o /dev/null -w "%{http_code}" http://localhost:3000 | grep -q "200\|302\|404"; do echo "Waiting for Web UI..."; sleep 5; done'
          echo "✓ Web UI is responding"
          
          # Wait for TTS service
          echo "Waiting for TTS service..."
          timeout 120 bash -c 'until curl -s http://localhost:8880/v1/models; do echo "Waiting for TTS..."; sleep 5; done'
          echo "✓ TTS service is responding"

      - name: Test API endpoints
        run: |
          echo "Testing Ollama API..."
          # Test basic API endpoints
          curl -s http://localhost:11434/api/tags | jq '.' || echo "Ollama API responded (no models yet)"
          
          # Test model pull (start but don't wait for completion)
          echo "Starting model pull test..."
          curl -X POST http://localhost:11434/api/pull \
            -H "Content-Type: application/json" \
            -d '{"name": "llama3.2:1b"}' &
          PULL_PID=$!
          
          # Wait a bit then check if pull started
          sleep 10
          if ps -p $PULL_PID > /dev/null; then
            echo "✓ Model pull request initiated successfully"
            kill $PULL_PID 2>/dev/null || true
          fi
          
          echo "Testing TTS API..."
          TTS_MODELS=$(curl -s http://localhost:8880/v1/models)
          echo "TTS Models response: $TTS_MODELS"
          echo "$TTS_MODELS" | grep -q "model" && echo "✓ TTS API is working" || echo "⚠ TTS API response unexpected"

      - name: Test make commands (if applicable)
        run: |
          if [ -f Makefile ]; then
            echo "Testing make commands..."
            make status || echo "Make status command not available or failed"
            
            # Test that scripts are executable
            echo "Checking script permissions..."
            find scripts/ -name "*.sh" -exec test -x {} \; && echo "✓ All scripts are executable"
          fi

      - name: Check service logs for errors
        if: always()
        run: |
          echo "=== Service Status ==="
          docker compose -f ${{ matrix.config.compose_file }} -f docker-compose.ci.yml ps
          
          echo -e "\n=== Ollama Logs (last 50 lines) ==="
          docker logs ollama --tail 50 2>&1 || echo "Could not get Ollama logs"
          
          echo -e "\n=== Web UI Logs (last 50 lines) ==="
          docker logs ollama-webui --tail 50 2>&1 || echo "Could not get Web UI logs"
          
          echo -e "\n=== TTS Logs (last 50 lines) ==="
          docker logs kokoro-tts --tail 50 2>&1 || echo "Could not get TTS logs"

      - name: Test configuration differences
        run: |
          echo "=== Configuration Summary for ${{ matrix.config.name }} ==="
          echo "Original file: ${{ matrix.config.compose_file }}"
          echo "Services defined:"
          docker compose -f ${{ matrix.config.compose_file }} -f docker-compose.ci.yml config --services
          
          # Show key differences in CI vs local config
          echo -e "\n=== CI Modifications Applied ==="
          echo "- Removed GPU runtime and device mappings"
          echo "- Removed audio device mounts"
          echo "- Removed user-specific volume mounts"
          echo "- Simplified security options"

      - name: Cleanup
        if: always()
        run: |
          echo "Cleaning up..."
          docker compose -f ${{ matrix.config.compose_file }} -f docker-compose.ci.yml down -v --remove-orphans
          docker system prune -af
          
  test-summary:
    needs: [test-docker-compose]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Test Summary
        run: |
          echo "=== Docker Compose CI Test Summary ==="
          echo "All docker-compose configurations have been tested in a CI environment"
          echo "Original files remain unchanged and work for local development"
          echo "CI overrides ensure compatibility with GitHub Actions environment"
